{"version":3,"sources":["assets\\scripts\\ExtraBlockHandler.ts"],"names":[],"mappings":";;;;;;AAEA;IACI,2BAAoB,KAAoB;QAApB,UAAK,GAAL,KAAK,CAAe;IAAI,CAAC;IACtC,kCAAM,GAAb,UAAc,IAAqB;QAC/B,QAAQ,IAAI,CAAC,SAAS,EAAE;YACpB,KAAK,oBAAoB;gBACrB,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACxC,MAAM;YACV,KAAK,MAAM;gBACP,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;gBAC5C,MAAM;YACV,KAAK,kBAAkB;gBACnB,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACtC,MAAM;YACV,KAAK,UAAU;gBACX,OAAO,IAAI,CAAC,YAAY,EAAE,CAAC;gBAC3B,MAAM;YACV;gBACI,OAAO,EAAE,CAAC;SACjB;QACD,OAAO;IACX,CAAC;IACO,6CAAiB,GAAzB,UAA0B,GAAW;QACjC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7B,CAAC;IACO,2CAAe,GAAvB,UAAwB,GAAW;QAC/B,IAAM,eAAe,GAAgB,EAAE,CAAC;QACxC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC3C,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;SAC5C;QACD,OAAO,eAAe,CAAC;IAC3B,CAAC;IACO,uCAAW,GAAnB,UAAoB,UAAkB,EAAE,UAAkB;QACtD,IAAM,eAAe,GAAgB,EAAE,CAAC;QACxC,KAAK,IAAI,GAAG,GAAG,UAAU,GAAG,CAAC,EAAE,GAAG,IAAI,UAAU,GAAG,CAAC,EAAE,GAAG,EAAE,EAAE;YACzD,KAAK,IAAI,GAAG,GAAG,UAAU,GAAG,CAAC,EAAE,GAAG,IAAI,UAAU,GAAG,CAAC,EAAE,GAAG,EAAE,EAAE;gBACzD,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM;oBACnC,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE;oBAC1C,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;iBAC9C;aACJ;SACJ;QACD,OAAO,eAAe,CAAC;IAC3B,CAAC;IACO,wCAAY,GAApB;QACI,OAAO,EAAE,CAAC,MAAM,OAAT,EAAE,EAAW,IAAI,CAAC,KAAK,EAAC;IACnC,CAAC;IACL,wBAAC;AAAD,CA9CA,AA8CC,IAAA","file":"","sourceRoot":"/","sourcesContent":["import { BlockClickEvent, BoardType, isExtraBlockKey } from \"./Types\";\n\nexport default class ExtraBlockHandler {\n    constructor(private board: BoardType[][]) { }\n    public handle(data: BlockClickEvent): BoardType[] {\n        switch (data.blockType) {\n            case 'rockets_horizontal':\n                return this.getHorizontalLine(data.row);\n                break;\n            case 'bomb':\n                return this.getBombArea(data.row, data.col);\n                break;\n            case 'rockets_vertical':\n                return this.getVerticalLine(data.col);\n                break;\n            case 'bomb_max':\n                return this.getAllBlocks();\n                break;\n            default:\n                return [];\n        }\n        return;\n    }\n    private getHorizontalLine(row: number): BoardType[] {\n        return (this.board[row]);\n    }\n    private getVerticalLine(col: number): BoardType[] {\n        const blockForDestroy: BoardType[] = [];\n        for (let y = 0; y < this.board[0].length; y++) {\n            blockForDestroy.push(this.board[y][col]);\n        }\n        return blockForDestroy;\n    }\n    private getBombArea(clickedRow: number, clickedCol: number): BoardType[] {\n        const blockForDestroy: BoardType[] = [];\n        for (let row = clickedRow - 1; row <= clickedRow + 1; row++) {\n            for (let col = clickedCol - 1; col <= clickedCol + 1; col++) {\n                if (row >= 0 && row < this.board.length &&\n                    col >= 0 && col < this.board[row].length) {\n                    blockForDestroy.push(this.board[row][col]);\n                }\n            }\n        }\n        return blockForDestroy;\n    }\n    private getAllBlocks(): BoardType[] {\n        return [].concat(...this.board)\n    }\n}\n"]}