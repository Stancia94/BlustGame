{"version":3,"sources":["assets\\scripts\\ExtraBlockHandler.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { BlockClickEvent, BoardType, isExtraBlockKey } from \"./Types\";\n\nexport default class ExtraBlockHandler {\n    constructor(private board: BoardType[][]) { }\n    public handle(data: BlockClickEvent): BoardType[] {\n        switch (data.blockType) {\n            case 'rockets_horizontal':\n                return this.getHorizontalLine(data.row);\n                break;\n            case 'bomb':\n                return this.getBombArea(data.row, data.col);\n                break;\n            case 'rockets_vertical':\n                return this.getVerticalLine(data.col);\n                break;\n            case 'bomb_max':\n                return this.getAllBlocks();\n                break;\n            default:\n                return [];\n        }\n        return;\n    }\n    private getHorizontalLine(row: number): BoardType[] {\n        return this.includesExtraBlock(this.board[row]);\n    }\n    private getVerticalLine(col: number): BoardType[] {\n        const blockForDestroy: BoardType[] = [];\n        for (let y = 0; y < this.board[0].length; y++) {\n            blockForDestroy.push(this.board[y][col]);\n        }\n        return blockForDestroy;\n    }\n    private getBombArea(clickedRow: number, clickedCol: number): BoardType[] {\n        const blockForDestroy: BoardType[] = [];\n        for (let row = clickedRow - 1; row <= clickedRow + 1; row++) {\n            for (let col = clickedCol - 1; col <= clickedCol + 1; col++) {\n                if (row >= 0 && row < this.board.length &&\n                    col >= 0 && col < this.board[row].length) {\n                    blockForDestroy.push(this.board[row][col]);\n                }\n            }\n        }\n        return blockForDestroy;\n    }\n    private getAllBlocks(): BoardType[] {\n        return [].concat(...this.board)\n    }\n    private includesExtraBlock(\n        initialBlocks: BoardType[]\n    ): BoardType[] {\n        const result: BoardType[] = [];\n        const visited: Set<BoardType> = new Set();\n        const queue: BoardType[] = [...initialBlocks];\n\n        while (queue.length > 0) {\n            const block = queue.shift();\n            if (!block || visited.has(block)) continue;\n\n            visited.add(block);\n            result.push(block);\n\n            if (isExtraBlockKey(block.getType())) {\n                const data: BlockClickEvent = {\n                    blockType: block.getType(),\n                    row: block.getRow(),\n                    col: block.getCol(),\n                };\n\n                // вместо рекурсии — просто добавляем в очередь\n                const extraBlocks = this.handle(data);\n                queue.push(...extraBlocks);\n            }\n        }\n\n        return result;\n    }\n\n\n\n}\n"]}