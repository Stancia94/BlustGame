{"version":3,"sources":["assets\\scripts\\ExtraBlockClickHandler.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,uDAAkD;AAClD,iCAAsE;AACtE,uCAAwD;AAExD;IAAoD,0CAAY;IAC5D,gCAAY,KAAoB;eAC5B,kBAAM,KAAK,CAAC;IAChB,CAAC;IACM,uCAAM,GAAb,UAAc,IAAqB,EAAE,QAAwB;QACzD,IAAI,uBAAe,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;YACjC,IAAI,eAAe,GAAgB,EAAE,CAAC;YACtC,QAAQ,IAAI,CAAC,SAAS,EAAE;gBACpB,KAAK,oBAAoB;oBACrB,eAAe,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBACnD,MAAM;gBACV,KAAK,MAAM;oBACP,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;oBACvD,MAAM;gBACV,KAAK,kBAAkB;oBACnB,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBACjD,MAAM;gBACV,KAAK,UAAU;oBACX,eAAe,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;oBACtC,MAAM;gBACV;oBACI,OAAO,EAAE,CAAC;aACjB;YACD,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC5B,QAAQ,CAAC,IAAI,CAAC,IAAI,uBAAY,CAAC,eAAe,CAAC,CAAC,CAAC;aACpD;SACJ;QACD,OAAO,iBAAM,MAAM,YAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IACxC,CAAC;IACO,kDAAiB,GAAzB,UAA0B,GAAW;QACjC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7B,CAAC;IACO,gDAAe,GAAvB,UAAwB,GAAW;QAC/B,IAAM,eAAe,GAAgB,EAAE,CAAC;QACxC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC3C,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;SAC5C;QACD,OAAO,eAAe,CAAC;IAC3B,CAAC;IACO,4CAAW,GAAnB,UAAoB,UAAkB,EAAE,UAAkB;QACtD,IAAM,eAAe,GAAgB,EAAE,CAAC;QACxC,KAAK,IAAI,GAAG,GAAG,UAAU,GAAG,CAAC,EAAE,GAAG,IAAI,UAAU,GAAG,CAAC,EAAE,GAAG,EAAE,EAAE;YACzD,KAAK,IAAI,GAAG,GAAG,UAAU,GAAG,CAAC,EAAE,GAAG,IAAI,UAAU,GAAG,CAAC,EAAE,GAAG,EAAE,EAAE;gBACzD,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM;oBACnC,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE;oBAC1C,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;iBAC9C;aACJ;SACJ;QACD,OAAO,eAAe,CAAC;IAC3B,CAAC;IACO,6CAAY,GAApB;QACI,OAAO,EAAE,CAAC,MAAM,OAAT,EAAE,EAAW,IAAI,CAAC,KAAK,EAAC;IACnC,CAAC;IACL,6BAAC;AAAD,CAtDA,AAsDC,CAtDmD,+BAAY,GAsD/D","file":"","sourceRoot":"/","sourcesContent":["import { ClickHandler } from \"./HandlerInterface\";\nimport { BlockClickEvent, BoardType, isExtraBlockKey } from \"./Types\";\nimport { BoardCommand, DestroyGroup } from \"./Commands\";\n\nexport default class ExtraBlockClickHandler extends ClickHandler {\n    constructor(board: BoardType[][]) {\n        super(board);\n    }\n    public handle(data: BlockClickEvent, commands: BoardCommand[]): BoardCommand[] {\n        if (isExtraBlockKey(data.blockType)) {\n            let groupForDestroy: BoardType[] = [];\n            switch (data.blockType) {\n                case 'rockets_horizontal':\n                    groupForDestroy = this.getHorizontalLine(data.row);\n                    break;\n                case 'bomb':\n                    groupForDestroy = this.getBombArea(data.row, data.col);\n                    break;\n                case 'rockets_vertical':\n                    groupForDestroy = this.getVerticalLine(data.col);\n                    break;\n                case 'bomb_max':\n                    groupForDestroy = this.getAllBlocks();\n                    break;\n                default:\n                    return [];\n            }\n            if (groupForDestroy.length > 0) {\n                commands.push(new DestroyGroup(groupForDestroy));\n            }\n        }\n        return super.handle(data, commands);\n    }\n    private getHorizontalLine(row: number): BoardType[] {\n        return (this.board[row]);\n    }\n    private getVerticalLine(col: number): BoardType[] {\n        const blockForDestroy: BoardType[] = [];\n        for (let y = 0; y < this.board[0].length; y++) {\n            blockForDestroy.push(this.board[y][col]);\n        }\n        return blockForDestroy;\n    }\n    private getBombArea(clickedRow: number, clickedCol: number): BoardType[] {\n        const blockForDestroy: BoardType[] = [];\n        for (let row = clickedRow - 1; row <= clickedRow + 1; row++) {\n            for (let col = clickedCol - 1; col <= clickedCol + 1; col++) {\n                if (row >= 0 && row < this.board.length &&\n                    col >= 0 && col < this.board[row].length) {\n                    blockForDestroy.push(this.board[row][col]);\n                }\n            }\n        }\n        return blockForDestroy;\n    }\n    private getAllBlocks(): BoardType[] {\n        return [].concat(...this.board)\n    }\n}\n"]}