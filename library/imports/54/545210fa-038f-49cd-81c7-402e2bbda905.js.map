{"version":3,"sources":["assets\\scripts\\ExtraBlockClickHandler.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { ClickHandler } from \"./HandlerInterface\";\nimport { BlockClickEvent, BoardType, isExtraBlockKey } from \"./Types\";\nimport { BoardCommand, DestroyGroup } from \"./Commands\";\n\nexport default class ExtraBlockClickHandler extends ClickHandler {\n    constructor(board: BoardType[][]) {\n        super(board);\n    }\n    public handle(data: BlockClickEvent, commands: BoardCommand[]): BoardCommand[] {\n        if (!isExtraBlockKey(data.blockType)) return super.handle(data, commands);\n\n        const toProcess: BlockClickEvent[] = [data];\n        const processed: Set<string> = new Set();\n\n        while (toProcess.length > 0) {\n            const current = toProcess.pop()!;\n            const key = `${current.row}_${current.col}`;\n            if (processed.has(key)) continue;\n            processed.add(key);\n            let groupForDestroy: BoardType[] = [];\n            switch (current.blockType) {\n                case 'rockets_horizontal':\n                    groupForDestroy = this.getHorizontalLine(current.row);\n                    break;\n                case 'bomb':\n                    groupForDestroy = this.getBombArea(current.row, current.col);\n                    break;\n                case 'rockets_vertical':\n                    groupForDestroy = this.getVerticalLine(current.col);\n                    break;\n                case 'bomb_max':\n                    groupForDestroy = this.getAllBlocks();\n                    break;\n            }\n            if (groupForDestroy.length > 0) {\n                groupForDestroy.forEach(block => {\n                    if (isExtraBlockKey(block.getType())) {\n                        const next: BlockClickEvent = {\n                            blockType: block.getType(),\n                            row: block.getRow(),\n                            col: block.getCol(),\n                        };\n                        toProcess.push(next);\n                    }\n                });\n                commands.push(new DestroyGroup(groupForDestroy));\n            }\n        }\n\n        return super.handle(data, commands);\n    }\n\n    private getHorizontalLine(row: number): BoardType[] {\n        return (this.board[row]);\n    }\n    private getVerticalLine(col: number): BoardType[] {\n        const blockForDestroy: BoardType[] = [];\n        for (let y = 0; y < this.board[0].length; y++) {\n            blockForDestroy.push(this.board[y][col]);\n        }\n        return blockForDestroy;\n    }\n    private getBombArea(clickedRow: number, clickedCol: number): BoardType[] {\n        const blockForDestroy: BoardType[] = [];\n        for (let row = clickedRow - 1; row <= clickedRow + 1; row++) {\n            for (let col = clickedCol - 1; col <= clickedCol + 1; col++) {\n                if (row >= 0 && row < this.board.length &&\n                    col >= 0 && col < this.board[row].length) {\n                    blockForDestroy.push(this.board[row][col]);\n                }\n            }\n        }\n        return blockForDestroy;\n    }\n    private getAllBlocks(): BoardType[] {\n        return [].concat(...this.board)\n    }\n}\n"]}