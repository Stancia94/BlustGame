{"version":3,"sources":["assets\\scripts\\AudioManager.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAM,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAG5C;IAA0C,gCAAY;IAAtD;QAAA,qEA2CC;QAzCW,uBAAiB,GAAW,IAAI,CAAC;QAGzC,yBAAmB,GAAiB,IAAI,CAAC;;IAsC7C,CAAC;qBA3CoB,YAAY;IAOnB,6BAAM,GAAhB;QACI,IAAI,cAAY,CAAC,QAAQ,EAAE;YACvB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;YACpB,OAAO;SACV;QAED,cAAY,CAAC,QAAQ,GAAG,IAAI,CAAC;QAC7B,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1C,CAAC;IAED,4BAAK,GAAL;QACI,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE;YACtB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SACtB;IACL,CAAC;IAEO,mCAAY,GAApB;QACI,IAAI,IAAI,CAAC,iBAAiB,KAAK,IAAI,EAAE;YACjC,IAAM,KAAK,GAAG,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YAC9D,OAAO,KAAK,KAAK,EAAE,CAAC,WAAW,CAAC,UAAU,CAAC,OAAO,CAAC;SACtD;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAEO,8BAAO,GAAf,UAAgB,IAAoB;QAApB,qBAAA,EAAA,WAAoB;QAChC,IAAI,IAAI,CAAC,mBAAmB,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;YACrD,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;SACtF;IACL,CAAC;IAEM,8BAAO,GAAd;QACI,IAAI,IAAI,CAAC,iBAAiB,EAAE;YACxB,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YAC5C,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;SACjC;IACL,CAAC;;IAzCc,qBAAQ,GAAiB,IAAI,CAAC;IAI7C;QADC,QAAQ,CAAC,EAAE,CAAC,SAAS,CAAC;6DACkB;IALxB,YAAY;QADhC,OAAO;OACa,YAAY,CA2ChC;IAAD,mBAAC;CA3CD,AA2CC,CA3CyC,EAAE,CAAC,SAAS,GA2CrD;kBA3CoB,YAAY","file":"","sourceRoot":"/","sourcesContent":["const { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class AudioManager extends cc.Component {\n    private static instance: AudioManager = null;\n    private backgroundMusicId: number = null;\n\n    @property(cc.AudioClip)\n    backgroundMusicClip: cc.AudioClip = null;\n\n    protected onLoad(): void {\n        if (AudioManager.instance) {\n            this.node.destroy();\n            return;\n        }\n\n        AudioManager.instance = this;\n        cc.game.addPersistRootNode(this.node);\n    }\n\n    start() {\n        if (!this.isBGMPlaying()) {\n            this.playBGM(true);\n        }\n    }\n\n    private isBGMPlaying(): boolean {\n        if (this.backgroundMusicId !== null) {\n            const state = cc.audioEngine.getState(this.backgroundMusicId);\n            return state === cc.audioEngine.AudioState.PLAYING;\n        }\n        return false;\n    }\n\n    private playBGM(loop: boolean = true) {\n        if (this.backgroundMusicClip && !this.backgroundMusicId) {\n            this.backgroundMusicId = cc.audioEngine.play(this.backgroundMusicClip, loop, 0.06);\n        }\n    }\n\n    public stopBGM() {\n        if (this.backgroundMusicId) {\n            cc.audioEngine.stop(this.backgroundMusicId);\n            this.backgroundMusicId = null;\n        }\n    }\n}"]}