{"version":3,"sources":["assets\\scripts\\Commands.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AACA,uCAAsC;AAGtC,iCAAiD;AAKjD;IAAA;IAEA,CAAC;IAAD,kBAAC;AAAD,CAFA,AAEC,IAAA;AAFqB,kCAAW;AAGjC;IAAkC,gCAAW;IACzC,sBACY,MAAmB;QAD/B,YAGI,iBAAO,SACV;QAHW,YAAM,GAAN,MAAM,CAAa;;IAG/B,CAAC;IACD,8BAAO,GAAP,UAAQ,KAAY;QAChB,mBAAQ,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACpD,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,KAAK;YACtB,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,CAAC;YACnD,KAAK,CAAC,eAAe,EAAE,CAAC;QAC5B,CAAC,CAAC,CAAC;QACH,KAAK,CAAC,IAAI,EAAE,CAAC;QACb,KAAK,CAAC,IAAI,EAAE,CAAC;IACjB,CAAC;IACL,mBAAC;AAAD,CAfA,AAeC,CAfiC,WAAW,GAe5C;AAfY,oCAAY;AAgBzB;IAAyC,uCAAW;IAChD,6BACY,GAAW,EACX,GAAW,EACX,gBAA6B;QAHzC,YAKI,iBAAO,SACV;QALW,SAAG,GAAH,GAAG,CAAQ;QACX,SAAG,GAAH,GAAG,CAAQ;QACX,sBAAgB,GAAhB,gBAAgB,CAAa;;IAGzC,CAAC;IACD,qCAAO,GAAP,UAAQ,KAAY;QAApB,iBAeC;QAdG,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;QACtC,IAAM,SAAS,GAAG,KAAK,CAAC,UAAU,CAAC,YAAY,EAAE,CAAA;QACjD,IAAI,UAAU,GAAe,IAAI,CAAC;QAClC,IAAI,IAAI,CAAC,gBAAgB,CAAC,MAAM,IAAI,CAAC,EAAE;YACnC,UAAU,GAAG,KAAK,CAAC,YAAY,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC;SAC/F;aAAM;YACH,UAAU,GAAG,KAAK,CAAC,YAAY,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,8BAAsB,CAAC,CAAC,UAAU,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;SACzH;QACD,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;QAC/C,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,UAAU,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC,CAAA;QAC7F,IAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,SAAS,CACzC,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,MAAM,EAAE,KAAK,KAAI,CAAC,GAAG,IAAI,KAAK,CAAC,MAAM,EAAE,KAAK,KAAI,CAAC,GAAG,EAA1D,CAA0D,CACxE,CAAC;QACF,IAAI,KAAK,IAAI,CAAC;YAAE,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAC3D,CAAC;IACL,0BAAC;AAAD,CAxBA,AAwBC,CAxBwC,WAAW,GAwBnD;AAxBY,kDAAmB","file":"","sourceRoot":"/","sourcesContent":["import Board from \"./Board\";\nimport { EventBus } from \"./EventBus\";\nimport ExtraBlock from \"./ExrtaBlock\";\nimport { BoardType } from \"./Types\";\nimport { getRandomExtraBlockKey } from \"./Utils\";\n\nexport interface BoardCommand {\n    execute(board: Board): void;\n}\nexport abstract class BaseCommand implements BoardCommand {\n    abstract execute(board: Board): void;\n}\nexport class DestroyGroup extends BaseCommand {\n    constructor(\n        private blocks: BoardType[]\n    ) {\n        super();\n    }\n    execute(board: Board): void {\n        EventBus.emit('blocks-destroy', this.blocks.length);\n        this.blocks.forEach((block) => {\n            board.board[block.getRow()][block.getCol()] = null;\n            block.destroyYourself();\n        });\n        board.fall();\n        board.fill();\n    }\n}\nexport class UpgradeToExtraBlock extends BaseCommand {\n    constructor(\n        private row: number,\n        private col: number,\n        private blocksForDestroy: BoardType[]\n    ) {\n        super();\n    }\n    execute(board: Board): void {\n        board.deleteBlock(this.row, this.col);\n        const blockSize = board.blockSizer.getBlockSize()\n        let extraBlock: ExtraBlock = null;\n        if (this.blocksForDestroy.length >= 8) {\n            extraBlock = board.blockFactory.createExtraBlock(this.row, this.col, 'bomb_max', blockSize);\n        } else {\n            extraBlock = board.blockFactory.createExtraBlock(this.row, this.col, getRandomExtraBlockKey(['bomb_max']), blockSize);\n        }\n        board.setBlock(this.row, this.col, extraBlock);\n        extraBlock.node.setPosition(board.blockSizer.getBlockPosition(this.row, this.col, blockSize))\n        const index = this.blocksForDestroy.findIndex(\n            (block) => block.getRow() === this.row && block.getCol() === this.col\n        );\n        if (index >= 0) this.blocksForDestroy.splice(index, 1);\n    }\n}"]}