{"version":3,"sources":["assets\\scripts\\HandlerInterface.ts"],"names":[],"mappings":";;;;;;;AAAA,uCAAsC;AAStC;IAGI,sBAAY,KAAoB;QAC5B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;IACM,8BAAO,GAAd,UAAe,OAAgB;QAC3B,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC;QAC3B,OAAO,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;IACM,6BAAM,GAAb,UAAc,IAAqB,EAAE,QAAwB;QACzD,IAAI,IAAI,CAAC,WAAW,EAAE;YAClB,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAA;SACjD;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IACS,+BAAQ,GAAlB;QACI,mBAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC1B,CAAC;IACL,mBAAC;AAAD,CAnBA,AAmBC,IAAA;AAnBqB,oCAAY","file":"","sourceRoot":"/","sourcesContent":["import { EventBus } from \"./EventBus\";\nimport { BlockClickEvent, BoardType } from \"./Types\";\nimport { BoardCommand } from \"./Commands\";\n\nexport interface Handler {\n    setNext(handler: Handler): Handler;\n    handle(data: BlockClickEvent, commands: BoardCommand[]): BoardCommand[];\n}\n\nexport abstract class ClickHandler implements Handler {\n    private nextHandler: Handler;\n    protected board: BoardType[][];\n    constructor(board: BoardType[][]) {\n        this.board = board;\n    }\n    public setNext(handler: Handler): Handler {\n        this.nextHandler = handler;\n        return this.nextHandler;\n    }\n    public handle(data: BlockClickEvent, commands: BoardCommand[]): BoardCommand[] {\n        if (this.nextHandler) {\n            return this.nextHandler.handle(data, commands)\n        }\n        return null;\n    }\n    protected emitStep() {\n        EventBus.emit('step');\n    }\n}\n"]}